'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const vitepress = require('vitepress');
const vue = require('vue');

function usePermalink() {
  const fakeHost = "http://a.com";
  const router = vitepress.useRouter();
  const { site, theme, localeIndex } = vitepress.useData();
  const { base, cleanUrls } = site.value;
  const { permalinks = {} } = theme.value;
  const permalinkKeys = Object.keys(permalinks);
  const replaceUrlWhenPermalinkExist = (href) => {
    if (!permalinkKeys.length) return;
    const { pathname, search, hash } = new URL(href, fakeHost);
    const decodePath = decodeURIComponent(pathname.slice(base.length));
    const permalink = permalinks.map[decodePath.replace(/\.html/, "")];
    if (permalink === "/" + decodePath) return;
    if (permalink) {
      return vue.nextTick(() => {
        const to = base.replace(/\/$/, "") + permalink + search + hash;
        history.replaceState(history.state || null, "", to);
        router.onAfterUrlLoad?.(to);
      });
    }
    const filePath = teyGetFilePathByPermalink(pathname);
    if (filePath) {
      if (vitepress.inBrowser) document.title = "";
      const targetUrl = base + filePath + search + hash;
      history.replaceState(history.state || null, "", targetUrl);
      router.go(targetUrl);
    } else router.onAfterUrlLoad?.(href);
  };
  vue.onBeforeMount(() => {
    if (!router.state.permalinkPlugin) router.state = { ...router.state, permalinkPlugin: true };
    replaceUrlWhenPermalinkExist(window.location.href);
  });
  const teyGetFilePathByPermalink = (pathname) => {
    const decodePath = "/" + decodeURIComponent(pathname.slice(base.length)).replace(/\/$/, "").replace(/\.html/, "");
    const li = localeIndex.value;
    const maybeIsPermalink = cleanUrls ? decodePath : decodePath + ".html";
    let filePath = "";
    if (li !== "root" && !maybeIsPermalink.startsWith(`/${li}/`)) {
      filePath = permalinks.inv[`/${li}${maybeIsPermalink}`];
    } else filePath = permalinks.inv[maybeIsPermalink];
    if (filePath === decodePath) return "";
    return filePath;
  };
  const startWatch = () => {
    if (!permalinkKeys.length) return;
    const state = router.state || {};
    if (state.permalinkPlugin) return;
    const selfOnBeforeRouteChange = router.onBeforeRouteChange;
    router.onBeforeRouteChange = (href) => {
      const selfResult = selfOnBeforeRouteChange?.(href);
      if (selfResult === false) return false;
      if (href === base) return;
      const { pathname, search, hash } = new URL(href, fakeHost);
      const filePath = teyGetFilePathByPermalink(pathname);
      if (filePath) {
        const targetUrl = base + filePath + search + hash;
        router.go(targetUrl);
        return false;
      }
    };
    const selfOnAfterRouteChange = router.onAfterRouteChange;
    router.onAfterRouteChange = (href) => {
      replaceUrlWhenPermalinkExist(href);
      selfOnAfterRouteChange?.(href);
    };
    router.state = { ...router.state, permalinkPlugin: true };
  };
  return { startWatch };
}

exports.default = usePermalink;
