import { readdirSync, statSync, readFileSync, existsSync } from 'node:fs';
import { basename, resolve, join } from 'node:path';
import matter from 'gray-matter';
import { createLogger } from 'vite';
import picocolors from 'picocolors';

const getTitleFromMd = (mdContent) => {
  const lines = mdContent.trimStart().split(/\r?\n/);
  for (const line of lines) {
    if (line.startsWith("# ")) {
      return line.substring(2).trim();
    }
  }
  return void 0;
};
const isIllegalIndex = (index) => {
  return isNaN(index) || index < 0;
};
const isSome = (arr, name) => {
  return arr.some((item) => item === name || item instanceof RegExp && item.test(name));
};

const version = "1.0.10";

const logger = createLogger("info", {
  prefix: `[vitepress-plugin-sidebar-resolve v${version}]`
});
const info = (message, level = "green", option = { timestamp: true }) => {
  logger.info(picocolors[level](message), option);
};
const warn = (message, level = "yellow", option = { timestamp: true }) => {
  logger.warn(picocolors[level](message), option);
};
const warnOnce = (message, level = "yellow", option = { timestamp: true }) => {
  logger.info(picocolors[level](message), option);
};
const error = (message, level = "red", option = { timestamp: true }) => {
  logger.error(picocolors[level](message), option);
};
const logger$1 = {
  info,
  warn,
  warnOnce,
  error
};

const DEFAULT_IGNORE_DIR = ["node_modules", "dist", ".vitepress", "public"];
const createSidebar = (option = {}, prefix = "/") => {
  const {
    path,
    ignoreList = [],
    scannerRootMd = true,
    collapsed,
    titleFormMd = false,
    initItems = true,
    initItemsText = false,
    sideBarResolved,
    ignoreWarn = false
  } = option;
  if (!path) return {};
  prefix = prefix.replace(/\/$/, "") + "/";
  const sidebar = {};
  const dirPaths = readDirPaths(path, ignoreList);
  const key = prefix === "/" ? prefix : `/${prefix}`;
  if (scannerRootMd) sidebar[key] = createSideBarItems(path, { ...option, ignoreIndexMd: true }, key, scannerRootMd);
  dirPaths.forEach((dirPath) => {
    const fileName = basename(dirPath);
    const sidebarItems = createSideBarItems(dirPath, option, `${key}${fileName}/`);
    if (!ignoreWarn && !sidebarItems.length) {
      return logger$1.warn(`\u8BE5\u76EE\u5F55 '${dirPath}' \u5185\u90E8\u6CA1\u6709\u4EFB\u4F55\u6587\u4EF6\u6216\u6587\u4EF6\u5E8F\u53F7\u51FA\u9519\uFF0C\u5C06\u5FFD\u7565\u751F\u6210\u5BF9\u5E94\u4FA7\u8FB9\u680F`);
    }
    const { name, title } = resolveFileName(fileName, dirPath);
    const mdTitle = titleFormMd ? tryGetMdTitle(dirPath, fileName) : "";
    const text = initItemsText ? mdTitle || title : void 0;
    sidebar[`${key}${fileName}/`] = initItems ? [
      {
        text,
        collapsed: typeof collapsed === "function" ? collapsed(prefix + name, text) : collapsed,
        items: sidebarItems
      }
    ] : sidebarItems;
  });
  return sideBarResolved?.(sidebar) ?? sidebar;
};
const readDirPaths = (sourceDir, ignoreList = []) => {
  const dirPaths = [];
  const ignoreListAll = [...DEFAULT_IGNORE_DIR, ...ignoreList];
  const dirOrFilenames = readdirSync(sourceDir);
  dirOrFilenames.forEach((dirOrFilename) => {
    const secondDirPath = resolve(sourceDir, dirOrFilename);
    if (!isSome(ignoreListAll, dirOrFilename) && statSync(secondDirPath).isDirectory()) {
      dirPaths.push(secondDirPath);
    }
  });
  return dirPaths;
};
const createSideBarItems = (root, option, prefix = "/", onlyScannerRootMd = false) => {
  const {
    collapsed,
    ignoreList = [],
    ignoreIndexMd = false,
    fileIndexPrefix = false,
    sideBarItemsResolved,
    beforeCreateSideBarItems,
    titleFormMd = false,
    ignoreWarn = false
  } = option;
  const ignoreListAll = [...DEFAULT_IGNORE_DIR, ...ignoreList];
  let sidebarItems = [];
  const sidebarItemsNoIndex = [];
  let dirOrFilenames = readdirSync(root);
  dirOrFilenames = beforeCreateSideBarItems?.(dirOrFilenames) ?? dirOrFilenames;
  dirOrFilenames.forEach((dirOrFilename) => {
    if (isSome(ignoreListAll, dirOrFilename)) return [];
    const filePath = resolve(root, dirOrFilename);
    const { index: indexStr, title, type, name } = resolveFileName(dirOrFilename, filePath);
    const index = parseInt(indexStr, 10);
    if (!ignoreWarn && fileIndexPrefix && isIllegalIndex(index)) {
      logger$1.warn(`\u8BE5\u6587\u4EF6 '${filePath}' \u5E8F\u53F7\u51FA\u9519\uFF0C\u8BF7\u586B\u5199\u6B63\u786E\u7684\u5E8F\u53F7`);
      return [];
    }
    if (!ignoreWarn && sidebarItems[index]) logger$1.warn(`\u8BE5\u6587\u4EF6 '${filePath}' \u7684\u5E8F\u53F7\u5728\u540C\u4E00\u7EA7\u522B\u4E2D\u91CD\u590D\u51FA\u73B0\uFF0C\u5C06\u4F1A\u88AB\u8986\u76D6`);
    if (!onlyScannerRootMd && statSync(filePath).isDirectory()) {
      const mdTitle = titleFormMd ? tryGetMdTitle(root, dirOrFilename) : "";
      const text = mdTitle || title;
      const sidebarItem = {
        text,
        collapsed: typeof collapsed === "function" ? collapsed(prefix + name, text) : collapsed,
        items: createSideBarItems(filePath, option, `${prefix}${dirOrFilename}/`)
      };
      if (isIllegalIndex(index)) sidebarItemsNoIndex.push(sidebarItem);
      else sidebarItems[index] = sidebarItem;
    } else {
      if (onlyScannerRootMd && dirOrFilename === "index.md") return [];
      if (ignoreIndexMd && ["index.md", "index.MD"].includes(dirOrFilename)) return [];
      if (!["md", "MD"].includes(type)) {
        if (!ignoreWarn && !onlyScannerRootMd) logger$1.warn(`\u8BE5\u6587\u4EF6 '${filePath}' \u975E .md \u683C\u5F0F\u6587\u4EF6\uFF0C\u4E0D\u652F\u6301\u8BE5\u6587\u4EF6\u7C7B\u578B`);
        return [];
      }
      const content = readFileSync(filePath, "utf-8");
      const { data: { title: frontmatterTitle, sidebar = true } = {}, content: mdContent } = matter(content, {});
      if (!sidebar) return [];
      const mdTitle = titleFormMd ? getTitleFromMd(mdContent) : "";
      const text = frontmatterTitle || mdTitle || title;
      const sidebarItem = {
        text,
        collapsed: typeof collapsed === "function" ? collapsed(prefix + name, text) : collapsed,
        link: prefix + name
      };
      if (isIllegalIndex(index)) sidebarItemsNoIndex.push(sidebarItem);
      else sidebarItems[index] = sidebarItem;
    }
  });
  sidebarItems = [...sidebarItems, ...sidebarItemsNoIndex].filter(Boolean);
  return sideBarItemsResolved?.(sidebarItems) ?? sidebarItems;
};
const resolveFileName = (filename, filePath) => {
  const stat = statSync(filePath);
  let index = "";
  let title = "";
  let type = "";
  let name = "";
  const fileNameArr = filename.split(".");
  if (fileNameArr.length === 2) {
    index = fileNameArr[0] === "index" ? "0" : fileNameArr[0];
    title = stat.isDirectory() ? fileNameArr[1] : fileNameArr[0];
    type = fileNameArr[1];
    name = fileNameArr[0];
  } else {
    const firstDotIndex = filename.indexOf(".");
    const lastDotIndex = filename.lastIndexOf(".");
    index = filename.substring(0, firstDotIndex);
    type = filename.substring(lastDotIndex + 1);
    name = stat.isDirectory() ? filename : filename.substring(0, lastDotIndex);
    if (stat.isDirectory()) title = filename.substring(firstDotIndex + 1);
    else title = filename.substring(firstDotIndex + 1, lastDotIndex);
  }
  return { index, title, type, name };
};
const tryGetMdTitle = (root, dirOrFilename) => {
  const filePaths = [
    join(root, dirOrFilename, "index.md"),
    join(root, dirOrFilename, "index.MD"),
    join(root, dirOrFilename, dirOrFilename + ".md")
  ];
  for (const filePath of filePaths) {
    if (!existsSync(filePath)) continue;
    const content = readFileSync(filePath, "utf-8");
    const { content: mdContent } = matter(content, {});
    const t = getTitleFromMd(mdContent);
    if (t) return t;
  }
  return "";
};

function VitePluginVitePressSidebarResolve(option = {}) {
  let isExecute = false;
  return {
    name: "vite-plugin-vitepress-sidebar-resolve",
    configureServer({ watcher, restart }) {
      if (!option.restart) return;
      watcher.add("*.md");
      watcher.on("add", async (path) => {
        if (!path.endsWith(".md")) return;
        await restart();
      }).on("unlink", async (path) => {
        if (!path.endsWith(".md")) return;
        await restart();
      });
    },
    config(config) {
      if (isExecute) return;
      isExecute = true;
      const {
        site: { themeConfig = {}, locales = {} },
        srcDir
      } = config.vitepress;
      const { path, ignoreList, localeRootDir } = option;
      const baseDir = path ? join(srcDir, path) : srcDir;
      const localesKeys = Object.keys(locales).filter((key) => key !== "root");
      if (!localesKeys.length) return setSideBar(themeConfig, createSidebar({ ...option, path: baseDir }));
      localesKeys.forEach((localesKey) => {
        const sidebar = createSidebar(
          { ...option, path: `${baseDir}/${localesKey}` },
          localesKey
        );
        setSideBar(locales[localesKey].themeConfig, sidebar);
      });
      const rootDir = localeRootDir ? `/${localeRootDir}` : "";
      const rootSideBar = createSidebar({
        ...option,
        path: `${baseDir}${rootDir}`,
        ignoreList: [...ignoreList || [], ...localesKeys]
      });
      setSideBar(locales["root"].themeConfig, rootSideBar);
    }
  };
}
const setSideBar = (themeConfig, sidebar) => {
  themeConfig = themeConfig || {};
  themeConfig.sidebar = {
    ...sidebar,
    ...Array.isArray(themeConfig.sidebar) ? logger$1.warn("\u81EA\u5B9A\u4E49 Sidebar \u5FC5\u987B\u662F\u5BF9\u8C61\u5F62\u5F0F") : themeConfig.sidebar
  };
  logger$1.info("Injected Sidebar Data Successfully. \u6CE8\u5165\u4FA7\u8FB9\u680F\u6570\u636E\u6210\u529F!");
};

export { VitePluginVitePressSidebarResolve as default, getTitleFromMd, isIllegalIndex, isSome };
