import { defineComponent, createPropsRestProxy, useSlots, computed, createElementBlock, openBlock, normalizeStyle, normalizeClass, unref, renderSlot, createBlock, createCommentVNode, resolveDynamicComponent } from 'vue';
import { isString, addUnit } from '../../../../helper/dist/index.mjs';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import '../../../../composables/useZIndex.mjs';
import _sfc_main$1 from './components/SvgIcon.vue2.mjs';
import _sfc_main$2 from './components/FontIcon.vue2.mjs';
import _sfc_main$3 from './components/IconifyOffline.vue2.mjs';
import _sfc_main$4 from './components/IconifyOnline.vue2.mjs';

const _hoisted_1 = ["src", "alt"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "Icon" },
  __name: "index",
  props: {
    icon: { default: "" },
    iconType: {},
    size: {},
    color: {},
    hover: { type: Boolean, default: false },
    hoverColor: {},
    imgAlt: {},
    style: {}
  },
  setup(__props) {
    const ns = useNamespace("icon");
    const props = createPropsRestProxy(__props, ["icon", "iconType", "color", "hover", "hoverColor"]);
    const slot = useSlots();
    const getStyle = () => {
      return {
        ...props.style,
        "--icon-color": __props.color,
        "--icon-size": props.size && addUnit(props.size),
        "--icon-color-hover": __props.hoverColor || ns.cssVar("theme-color")
      };
    };
    const finalIcon = computed(() => {
      if (isString(__props.icon)) return __props.icon.replace(/^(if-|uni-|sym-|img-)/, "");
      return __props.icon;
    });
    const getFontIconType = () => {
      if (__props.iconType && ["unicode", "iconfont", "symbol"].includes(__props.iconType)) {
        return __props.iconType;
      }
      if (!isString(__props.icon)) return "iconfont";
      if (__props.icon.toLowerCase().startsWith("if-")) return "iconfont";
      if (__props.icon.toLowerCase().startsWith("uni-")) return "unicode";
      if (__props.icon.toLowerCase().startsWith("sym-")) return "symbol";
    };
    const isSvgIcon = () => isString(__props.icon) && (__props.iconType === "svg" || __props.icon.startsWith("<svg"));
    const isFontIcon = () => isString(__props.icon) && getFontIconType();
    const isComponent = () => !isString(__props.icon) && (__props.iconType === "component" || __props.icon.name || __props.icon.setup);
    const isIconifyOffline = () => !isString(__props.icon) && (__props.iconType === "iconifyOffline" || __props.icon.body);
    const isIconifyOnline = () => isString(__props.icon) && (__props.iconType === "iconifyOnline" || __props.icon.includes(":"));
    const isImg = () => isString(__props.icon) && (__props.iconType === "img" || __props.icon.toLowerCase().startsWith("img-"));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(
        "span",
        {
          class: normalizeClass([unref(ns).b(), unref(ns).is("hover", _ctx.hover)]),
          style: normalizeStyle(getStyle())
        },
        [
          unref(slot).default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : isComponent() ? (openBlock(), createBlock(resolveDynamicComponent(finalIcon.value), {
            key: 1,
            size: _ctx.size
          }, null, 8, ["size"])) : isImg() ? (openBlock(), createElementBlock("img", {
            key: 2,
            src: finalIcon.value,
            alt: _ctx.imgAlt
          }, null, 8, _hoisted_1)) : isSvgIcon() ? (openBlock(), createBlock(_sfc_main$1, {
            key: 3,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : isFontIcon() ? (openBlock(), createBlock(_sfc_main$2, {
            key: 4,
            icon: finalIcon.value,
            iconType: getFontIconType()
          }, null, 8, ["icon", "iconType"])) : isIconifyOffline() ? (openBlock(), createBlock(_sfc_main$3, {
            key: 5,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : isIconifyOnline() ? (openBlock(), createBlock(_sfc_main$4, {
            key: 6,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : createCommentVNode("v-if", true)
        ],
        6
        /* CLASS, STYLE */
      );
    };
  }
});

export { _sfc_main as default };
