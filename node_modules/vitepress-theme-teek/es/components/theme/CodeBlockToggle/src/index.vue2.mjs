import { defineComponent, watch, nextTick } from 'vue';
import { isClient, isBoolean } from '../../../../helper/dist/index.mjs';
import { useEventListener } from '../../../../composables/useEventListener.mjs';
import 'vitepress';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import '../../../../composables/useZIndex.mjs';
import arrowDownIcon from '../../../../static/icons/arrowDown.mjs';
import message from '../../../common/Message/src/method.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';

const documentAttribute = "code-block";
const foldClass = "fold";
const arrowClass = "code-arrow";
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "CodeBlockToggle" },
  __name: "index",
  setup(__props) {
    const ns = useNamespace();
    const { getTeekConfigRef } = useTeekConfig();
    const codeBlockConfig = getTeekConfigRef("codeBlock", {
      collapseHeight: 700,
      copiedDone: void 0
    });
    watch(
      codeBlockConfig,
      (newVal) => {
        if (!isClient) return;
        const { disabled } = newVal || {};
        if (disabled) return document.documentElement.removeAttribute(documentAttribute);
        document.documentElement.setAttribute(documentAttribute, ns.namespace);
        nextTick(() => initCodeBlock());
      },
      { immediate: true }
    );
    const initCodeBlock = () => {
      const modes = document.querySelectorAll(".vp-doc div[class*='language-']");
      Array.from(modes).forEach((item) => {
        const copyDom = item.querySelector(`.copy`);
        copyDom?.addEventListener("click", (e) => {
          codeBlockConfig.value.copiedDone?.(message);
        });
        const className = item.parentElement?.className;
        if (className?.includes("details") || className?.includes(ns.joinNamespace("vp-code"))) return;
        const arrowElement = item.querySelector(`.${arrowClass}`);
        if (arrowElement) return;
        const newArrowElement = document.createElement("div");
        newArrowElement.classList.add(arrowClass);
        newArrowElement.innerHTML = arrowDownIcon;
        addClickEvent(newArrowElement, item);
        item.append(newArrowElement);
      });
    };
    const addClickEvent = (arrowDom, codeDom) => {
      const modeHeight = getElementHeight(codeDom);
      codeDom.style.height = `${modeHeight}px`;
      const preDom = codeDom.querySelector("pre");
      const lineNumbersWrapperDom = codeDom.querySelector(".line-numbers-wrapper");
      const codeBlockState = {
        expand: { height: `${modeHeight}px`, display: "block", speed: 80 },
        fold: { height: ns.cssVar("code-block-fold-height"), display: "none", speed: 400 }
      };
      let timer;
      const clearTimer = () => {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
      };
      const toggle = () => {
        const isFold = arrowDom.classList.contains(foldClass);
        const state = codeBlockState[isFold ? "expand" : "fold"];
        codeDom.style.height = state.height;
        clearTimer();
        if (preDom || lineNumbersWrapperDom) {
          timer = setTimeout(() => {
            if (preDom) preDom.style.display = state.display;
            if (lineNumbersWrapperDom) lineNumbersWrapperDom.style.display = state.display;
            if (timer) clearTimer();
          }, state.speed);
        }
        arrowDom.classList.toggle(foldClass);
      };
      useEventListener(arrowDom, "click", toggle);
      const collapseHeight = codeBlockConfig.value.collapseHeight;
      if (isBoolean(collapseHeight)) collapseHeight && toggle();
      else if (collapseHeight && modeHeight > collapseHeight) toggle();
    };
    const getElementHeight = (item) => {
      const parentElementClass = item.parentElement?.className || "";
      if (!parentElementClass.includes("blocks")) return item.offsetHeight;
      if (parentElementClass.includes("blocks") && item.className.includes("active")) return item.offsetHeight;
      item.style.display = "block";
      const height = item.offsetHeight;
      item.style.display = "";
      return height;
    };
    return (_ctx, _cache) => {
      return null;
    };
  }
});

export { _sfc_main as default };
