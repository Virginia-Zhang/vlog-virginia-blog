import { defineComponent, ref, onBeforeUnmount, createBlock, createCommentVNode, unref, openBlock, TransitionGroup, normalizeClass, withCtx, createElementBlock, Fragment, renderList, withDirectives, createElementVNode, toDisplayString, vShow } from 'vue';
import { useData, withBase } from 'vitepress';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useNamespace } from '../../../../composables/useNamespace.mjs';
import { useWindowSize } from '../../../../composables/useWindowSize.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';

const _hoisted_1 = ["aria-labelledby"];
const _hoisted_2 = ["href", "aria-label"];
const _hoisted_3 = ["src", "alt", "aria-label"];
const _hoisted_4 = ["id"];
const _hoisted_5 = { class: "feature-description" };
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "HomeBannerFeature" },
  __name: "HomeBannerFeature",
  setup(__props) {
    const ns = useNamespace("banner-feature");
    const { t } = useLocale();
    const { getTeekConfigRef } = useTeekConfig();
    const { frontmatter } = useData();
    const bannerConfig = getTeekConfigRef("banner", {
      features: frontmatter.value.tk?.features || [],
      featureCarousel: 4e3
    });
    const active = ref(0);
    const isMobile = ref(false);
    let timer;
    const clearTimer = () => {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    };
    useWindowSize((width) => {
      const { features, featureCarousel } = bannerConfig.value;
      if (width <= 719) {
        isMobile.value = true;
        clearTimer();
        timer = setInterval(() => {
          active.value = (active.value + 1) % features.length;
        }, featureCarousel);
      } else {
        isMobile.value = false;
        clearTimer();
      }
    });
    onBeforeUnmount(() => {
      clearTimer();
    });
    return (_ctx, _cache) => {
      return unref(bannerConfig).features.length ? (openBlock(), createBlock(TransitionGroup, {
        key: 0,
        name: unref(ns).joinNamespace("slide-next"),
        tag: "div",
        class: normalizeClass([unref(ns).b(), unref(ns).joinNamespace("wallpaper-outside"), "flx-wrap-between"]),
        "aria-label": unref(t)("tk.homeBanner.featureLabel")
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(unref(bannerConfig).features, (feature, index) => {
              return withDirectives((openBlock(), createElementBlock("div", {
                class: normalizeClass(unref(ns).e("feature__item")),
                key: index,
                role: "group",
                "aria-labelledby": `feature-title-${index}`
              }, [
                feature.link ? (openBlock(), createElementBlock("a", {
                  key: 0,
                  href: unref(withBase)(feature.link),
                  class: "flx-column-center hover-color",
                  "aria-label": feature.title
                }, [
                  feature.imgUrl ? (openBlock(), createElementBlock("img", {
                    key: 0,
                    class: "feature-img",
                    src: unref(withBase)(feature.imgUrl),
                    alt: feature.title,
                    "aria-label": feature.title
                  }, null, 8, _hoisted_3)) : createCommentVNode("v-if", true),
                  createElementVNode("p", {
                    id: `feature-title-${index}`,
                    class: "feature-title"
                  }, toDisplayString(feature.title), 9, _hoisted_4),
                  createElementVNode(
                    "p",
                    _hoisted_5,
                    toDisplayString(feature.description),
                    1
                    /* TEXT */
                  )
                ], 8, _hoisted_2)) : createCommentVNode("v-if", true)
              ], 10, _hoisted_1)), [
                [vShow, !isMobile.value || active.value === index]
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["name", "class", "aria-label"])) : createCommentVNode("v-if", true);
    };
  }
});

export { _sfc_main as default };
