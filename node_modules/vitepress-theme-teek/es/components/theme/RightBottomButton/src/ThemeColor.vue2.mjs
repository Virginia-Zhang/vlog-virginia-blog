import { defineComponent, watch, onMounted, computed, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createElementVNode, toDisplayString, createVNode } from 'vue';
import { useData } from 'vitepress';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import '../../../../composables/useZIndex.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Icon/src/index.vue2.mjs';
import '@iconify/vue';
import _sfc_main$1 from '../../../common/Popover/src/index.vue2.mjs';
import { ThemeColor, themeColorAttribute } from '../../ThemeEnhance/src/themeEnhance.mjs';
import { themeColorStorageKey } from '../../ThemeEnhance/src/namespace.mjs';
import magicIcon from '../../../../static/icons/magic.mjs';
import { ns } from './namespace.mjs';

const _hoisted_1 = ["title", "aria-label"];
const _hoisted_2 = ["onClick", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { t } = useLocale();
    const { frontmatter } = useData();
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const themeColor = useStorage(
      themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColor || ThemeColor.vpDefault
    );
    const update = (val) => {
      const el = document.documentElement;
      themeColor.value = val;
      if (el.getAttribute(themeColorAttribute) === val) return;
      el.setAttribute(themeColorAttribute, val);
    };
    watch(
      () => frontmatter.value.themeColor,
      (newVal) => {
        if (newVal) update(newVal);
      }
    );
    onMounted(() => {
      if (frontmatter.value.themeColor) update(frontmatter.value.themeColor);
      else update(themeColor.value);
    });
    const themeColorList = computed(() => {
      const { append = [] } = themeEnhanceConfig.value.themeColor || {};
      return [
        {
          label: t("tk.themeEnhance.themeColor.vpLabel"),
          tip: t("tk.themeEnhance.themeColor.vpTip"),
          options: [
            { label: t("tk.themeEnhance.themeColor.defaultLabel"), value: "vp-default" },
            { label: t("tk.themeEnhance.themeColor.greenLabel"), value: "vp-green" },
            { label: t("tk.themeEnhance.themeColor.yellowLabel"), value: "vp-yellow" },
            { label: t("tk.themeEnhance.themeColor.redLabel"), value: "vp-red" }
          ]
        },
        {
          label: t("tk.themeEnhance.themeColor.epLabel"),
          tip: t("tk.themeEnhance.themeColor.epTip"),
          options: [
            { label: t("tk.themeEnhance.themeColor.blueLabel"), value: "ep-blue" },
            { label: t("tk.themeEnhance.themeColor.greenLabel"), value: "ep-green" },
            { label: t("tk.themeEnhance.themeColor.yellowLabel"), value: "ep-yellow" },
            { label: t("tk.themeEnhance.themeColor.redLabel"), value: "ep-red" }
          ]
        },
        ...append
      ];
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        class: normalizeClass(unref(ns).e("button")),
        "popper-class": unref(ns).e("dropdown"),
        placement: "left-start",
        width: 120,
        "x-offset": 15,
        "transition-name": unref(ns).joinNamespace("fade-scale"),
        title: unref(t)("tk.themeEnhance.themeColor.title"),
        role: "button",
        "aria-label": unref(t)("tk.themeEnhance.themeColor.title")
      }, {
        reference: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            icon: unref(magicIcon),
            "aria-hidden": "true"
          }, null, 8, ["icon"])
        ]),
        default: withCtx(() => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(themeColorList.value, (item) => {
              return openBlock(), createElementBlock("ul", {
                key: item.label
              }, [
                createElementVNode("li", {
                  class: normalizeClass(`${unref(ns).e("dropdown__title")} sle`),
                  title: item.tip,
                  "aria-label": item.label
                }, toDisplayString(item.label), 11, _hoisted_1),
                createElementVNode("li", null, [
                  createElementVNode("ul", null, [
                    (openBlock(true), createElementBlock(
                      Fragment,
                      null,
                      renderList(item.options, (option) => {
                        return openBlock(), createElementBlock("li", {
                          key: item.label + option.value,
                          class: normalizeClass(["dropdown-item", "sle", { active: option.value === unref(themeColor) }]),
                          onClick: ($event) => update(option.value),
                          role: "button",
                          "aria-label": option.label
                        }, toDisplayString(option.label), 11, _hoisted_2);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "popper-class", "transition-name", "title", "aria-label"]);
    };
  }
});

export { _sfc_main as default };
