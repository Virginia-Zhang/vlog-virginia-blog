import { defineComponent, ref, watch, computed, createBlock, openBlock, unref, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createElementVNode, createVNode, toDisplayString, isRef, createTextVNode } from 'vue';
import { useData } from 'vitepress';
import { isClient } from '../../../../helper/dist/index.mjs';
import { useLocale } from '../../../../composables/useLocale.mjs';
import { useMediaQuery } from '../../../../composables/useMediaQuery.mjs';
import { useStorage } from '../../../../composables/useStorage.mjs';
import { useThemeColor, varNameList } from '../../../../composables/useThemeColor.mjs';
import '../../../../composables/useZIndex.mjs';
import waterIcon from '../../../../static/icons/theme-enhance/water.mjs';
import { useTeekConfig } from '../../ConfigProvider/index.mjs';
import _sfc_main$2 from '../../../common/Segmented/src/Segmented.vue2.mjs';
import { ThemeColor, mobileMaxWidthMedia, themeColorAttribute, themeColorList } from './themeEnhance.mjs';
import { themeColorStorageKey, themeBgColorStorageKey, ns } from './namespace.mjs';
import _sfc_main$1 from './components/BaseTemplate.vue2.mjs';
import _sfc_main$3 from './components/Switch.vue2.mjs';

const _hoisted_1 = { class: "flx-justify-between flx-1" };
const _hoisted_2 = { class: "flx-align-center" };
const _hoisted_3 = { class: "label" };
const _hoisted_4 = ["title", "aria-label"];
var _sfc_main = /* @__PURE__ */ defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { getTeekConfigRef } = useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale();
    const { frontmatter } = useData();
    const isMobile = useMediaQuery(mobileMaxWidthMedia);
    const themeColor = useStorage(
      themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColor || ThemeColor.vpDefault
    );
    const isSpread = useStorage(themeBgColorStorageKey, themeEnhanceConfig.value.themeColor?.defaultSpread || false);
    const oldThemeColor = ref(themeColor.value);
    const primaryColor = ref("");
    const { start, stop, clear } = useThemeColor(primaryColor, () => {
      if (themeColorList.includes(themeColor.value)) {
        return [varNameList.vpIndigo1, varNameList.vpIndigo2, varNameList.vpIndigo3, varNameList.vpIndigoSoft];
      }
    });
    const update = (val) => {
      if (!isClient) return;
      const el = document.documentElement;
      if (el.getAttribute(themeColorAttribute) === val) return;
      el.setAttribute(themeColorAttribute, val);
      clear();
      primaryColor.value = getComputedStyle(el).getPropertyValue(varNameList.vpIndigo1);
      themeEnhanceConfig.value.themeColor?.switchColorDone?.(val);
    };
    watch(themeColor, update, { immediate: true });
    watch(
      () => frontmatter.value.themeColor,
      (newVal) => {
        if (newVal) {
          oldThemeColor.value = themeColor.value;
          themeColor.value = newVal;
        } else {
          themeColor.value = oldThemeColor.value;
        }
      },
      { immediate: true }
    );
    watch(
      isSpread,
      (newVal) => {
        if (newVal) start();
        else stop();
      },
      { immediate: true, flush: "post" }
    );
    const themeColorSelectList = computed(() => {
      const { append = [] } = themeEnhanceConfig.value.themeColor || {};
      return [
        {
          label: t("tk.themeEnhance.themeColor.vpLabel"),
          tip: t("tk.themeEnhance.themeColor.vpTip"),
          options: [
            {
              value: ThemeColor.vpDefault,
              label: t("tk.themeEnhance.themeColor.defaultLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.defaultLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.defaultLabel")}`
            },
            {
              value: ThemeColor.vpGreen,
              label: t("tk.themeEnhance.themeColor.greenLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.greenLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.greenLabel")}`
            },
            {
              value: ThemeColor.vpYellow,
              label: t("tk.themeEnhance.themeColor.yellowLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.yellowLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.yellowLabel")}`
            },
            {
              value: ThemeColor.vpRed,
              label: t("tk.themeEnhance.themeColor.redLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.redLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.redLabel")}`
            }
          ]
        },
        {
          label: t("tk.themeEnhance.themeColor.epLabel"),
          tip: t("tk.themeEnhance.themeColor.epTip"),
          options: [
            {
              value: ThemeColor.epBlue,
              label: `${t("tk.themeEnhance.themeColor.blueLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.blueLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.blueLabel")}`
            },
            {
              value: ThemeColor.epGreen,
              label: `${t("tk.themeEnhance.themeColor.greenLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.greenLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.greenLabel")}`
            },
            {
              value: ThemeColor.epYellow,
              label: `${t("tk.themeEnhance.themeColor.yellowLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.yellowLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.yellowLabel")}`
            },
            {
              value: ThemeColor.epRed,
              label: `${t("tk.themeEnhance.themeColor.redLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.redLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.redLabel")}`
            }
          ]
        },
        ...append
      ];
    });
    const tips = [
      { title: t("tk.themeEnhance.themeColor.vpHelpTipTitle"), content: t("tk.themeEnhance.themeColor.vpHelpTipContent") },
      { title: t("tk.themeEnhance.themeColor.epHelpTipTitle"), content: t("tk.themeEnhance.themeColor.epHelpTipContent") }
    ];
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$1, {
        class: normalizeClass(unref(ns).e("theme-color")),
        icon: unref(waterIcon),
        title: unref(t)("tk.themeEnhance.themeColor.title"),
        helper: !unref(themeEnhanceConfig).themeColor?.disableHelp,
        "helper-desc": unref(t)("tk.themeEnhance.themeColor.helpDesc"),
        tips,
        disabled: unref(isMobile)
      }, {
        title: withCtx(() => [
          createElementVNode("div", _hoisted_1, [
            createTextVNode(
              toDisplayString(unref(t)("tk.themeEnhance.themeColor.title")) + " ",
              1
              /* TEXT */
            ),
            createElementVNode("div", _hoisted_2, [
              createElementVNode(
                "span",
                _hoisted_3,
                toDisplayString(unref(t)("tk.themeEnhance.themeColor.speedLabel")),
                1
                /* TEXT */
              ),
              createVNode(_sfc_main$3, {
                modelValue: unref(isSpread),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(isSpread) ? isSpread.value = $event : null)
              }, null, 8, ["modelValue"])
            ])
          ])
        ]),
        default: withCtx(() => [
          (openBlock(true), createElementBlock(
            Fragment,
            null,
            renderList(themeColorSelectList.value, (item) => {
              return openBlock(), createElementBlock(
                Fragment,
                {
                  key: item.label
                },
                [
                  createElementVNode("h3", {
                    title: item.tip,
                    "aria-label": item.label
                  }, toDisplayString(item.label), 9, _hoisted_4),
                  createVNode(unref(_sfc_main$2), {
                    modelValue: unref(themeColor),
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => isRef(themeColor) ? themeColor.value = $event : null),
                    options: item.options,
                    disabled: unref(isMobile)
                  }, null, 8, ["modelValue", "options", "disabled"])
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "icon", "title", "helper", "helper-desc", "disabled"]);
    };
  }
});

export { _sfc_main as default };
