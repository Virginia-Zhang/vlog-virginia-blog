import { useRouter } from 'vitepress';

const useVpRouter = () => {
  const router = useRouter();
  const bindBeforeRouteChange = (stateFlag, bindFn, bindPosition = "after") => {
    const { state = {}, onBeforeRouteChange } = router;
    if (state[stateFlag]) return;
    const beforeFn = bindPosition === "before" ? bindFn : onBeforeRouteChange;
    const afterFn = bindPosition === "after" ? bindFn : onBeforeRouteChange;
    router.onBeforeRouteChange = (href) => {
      const res = beforeFn?.(href);
      if (res === false) return false;
      return afterFn?.(href);
    };
    router.state = { ...state, [stateFlag]: true };
  };
  const bindBeforePageLoad = (stateFlag, bindFn, bindPosition = "after") => {
    const { state = {}, onBeforePageLoad } = router;
    if (state[stateFlag]) return;
    const beforeFn = bindPosition === "before" ? bindFn : onBeforePageLoad;
    const afterFn = bindPosition === "after" ? bindFn : onBeforePageLoad;
    router.onBeforePageLoad = (href) => {
      const res = beforeFn?.(href);
      if (res === false) return false;
      return afterFn?.(href);
    };
    router.state = { ...state, [stateFlag]: true };
  };
  const bindAfterPageLoad = (stateFlag, bindFn, bindPosition = "after") => {
    const { state = {}, onAfterPageLoad } = router;
    if (state[stateFlag]) return;
    const beforeFn = bindPosition === "before" ? bindFn : onAfterPageLoad;
    const afterFn = bindPosition === "after" ? bindFn : onAfterPageLoad;
    router.onAfterPageLoad = (href) => {
      beforeFn?.(href);
      afterFn?.(href);
    };
    router.state = { ...state, [stateFlag]: true };
  };
  const bindAfterRouteChange = (stateFlag, bindFn, bindPosition = "after") => {
    const { state = {}, onAfterRouteChange } = router;
    if (state[stateFlag]) return;
    const beforeFn = bindPosition === "before" ? bindFn : onAfterRouteChange;
    const afterFn = bindPosition === "after" ? bindFn : onAfterRouteChange;
    router.onAfterRouteChange = (href) => {
      beforeFn?.(href);
      afterFn?.(href);
    };
    router.state = { ...state, [stateFlag]: true };
  };
  const bindRouterFn = (stateFlag, bindFn) => {
    const { state = {} } = router;
    if (state[stateFlag]) return;
    bindFn(router);
    router.state = { ...state, [stateFlag]: true };
  };
  return {
    router,
    route: router.route,
    bindBeforeRouteChange,
    bindBeforePageLoad,
    bindAfterPageLoad,
    bindAfterRouteChange,
    bindRouterFn
  };
};

export { useVpRouter };
