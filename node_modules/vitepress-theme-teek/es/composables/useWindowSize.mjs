import { shallowRef } from 'vue';
import { isClient } from '../helper/dist/index.mjs';
import { useDebounce } from './useDebounce.mjs';
import { useEventListener } from './useEventListener.mjs';
import { useMounted } from './useMounted.mjs';

const useWindowSize = (sizeChangedCallback, options = {}) => {
  const {
    initialWidth = Number.POSITIVE_INFINITY,
    initialHeight = Number.POSITIVE_INFINITY,
    includeScrollbar = true,
    type = "inner"
  } = options;
  const width = shallowRef(initialWidth);
  const height = shallowRef(initialHeight);
  const update = useDebounce(() => {
    if (!isClient) return;
    if (type === "outer") {
      width.value = window.outerWidth;
      height.value = window.outerHeight;
    } else if (type === "visual" && window.visualViewport) {
      const { width: visualViewportWidth, height: visualViewportHeight, scale } = window.visualViewport;
      width.value = Math.round(visualViewportWidth * scale);
      height.value = Math.round(visualViewportHeight * scale);
    } else if (includeScrollbar) {
      width.value = window.innerWidth;
      height.value = window.innerHeight;
    } else {
      width.value = window.document.documentElement.clientWidth;
      height.value = window.document.documentElement.clientHeight;
    }
    sizeChangedCallback?.(width.value, height.value);
  }, 100);
  update();
  useMounted(update);
  useEventListener(() => window, "resize", update, { passive: true });
  if (isClient && type === "visual" && window.visualViewport) {
    useEventListener(window.visualViewport, "resize", update, { passive: true });
  }
  return { width, height, update };
};

export { useWindowSize };
