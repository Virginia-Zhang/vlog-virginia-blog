'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var index = require('../../../../helper/dist/index.js');
require('vitepress');
var useNamespace = require('../../../../composables/useNamespace.js');
require('../../../../composables/useZIndex.js');
var SvgIcon_vue_vue_type_script_setup_true_name_SvgIcon_lang = require('./components/SvgIcon.vue2.js');
var FontIcon_vue_vue_type_script_setup_true_lang = require('./components/FontIcon.vue2.js');
var IconifyOffline_vue_vue_type_script_setup_true_name_IconifyOffline_lang = require('./components/IconifyOffline.vue2.js');
var IconifyOnline_vue_vue_type_script_setup_true_lang = require('./components/IconifyOnline.vue2.js');

const _hoisted_1 = ["src", "alt"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "Icon" },
  __name: "index",
  props: {
    icon: { default: "" },
    iconType: {},
    size: {},
    color: {},
    hover: { type: Boolean, default: false },
    hoverColor: {},
    imgAlt: {},
    style: {}
  },
  setup(__props) {
    const ns = useNamespace.useNamespace("icon");
    const props = Vue.createPropsRestProxy(__props, ["icon", "iconType", "color", "hover", "hoverColor"]);
    const slot = Vue.useSlots();
    const getStyle = () => {
      return {
        ...props.style,
        "--icon-color": __props.color,
        "--icon-size": props.size && index.addUnit(props.size),
        "--icon-color-hover": __props.hoverColor || ns.cssVar("theme-color")
      };
    };
    const finalIcon = Vue.computed(() => {
      if (index.isString(__props.icon)) return __props.icon.replace(/^(if-|uni-|sym-|img-)/, "");
      return __props.icon;
    });
    const getFontIconType = () => {
      if (__props.iconType && ["unicode", "iconfont", "symbol"].includes(__props.iconType)) {
        return __props.iconType;
      }
      if (!index.isString(__props.icon)) return "iconfont";
      if (__props.icon.toLowerCase().startsWith("if-")) return "iconfont";
      if (__props.icon.toLowerCase().startsWith("uni-")) return "unicode";
      if (__props.icon.toLowerCase().startsWith("sym-")) return "symbol";
    };
    const isSvgIcon = () => index.isString(__props.icon) && (__props.iconType === "svg" || __props.icon.startsWith("<svg"));
    const isFontIcon = () => index.isString(__props.icon) && getFontIconType();
    const isComponent = () => !index.isString(__props.icon) && (__props.iconType === "component" || __props.icon.name || __props.icon.setup);
    const isIconifyOffline = () => !index.isString(__props.icon) && (__props.iconType === "iconifyOffline" || __props.icon.body);
    const isIconifyOnline = () => index.isString(__props.icon) && (__props.iconType === "iconifyOnline" || __props.icon.includes(":"));
    const isImg = () => index.isString(__props.icon) && (__props.iconType === "img" || __props.icon.toLowerCase().startsWith("img-"));
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createElementBlock(
        "span",
        {
          class: Vue.normalizeClass([Vue.unref(ns).b(), Vue.unref(ns).is("hover", _ctx.hover)]),
          style: Vue.normalizeStyle(getStyle())
        },
        [
          Vue.unref(slot).default ? Vue.renderSlot(_ctx.$slots, "default", { key: 0 }) : isComponent() ? (Vue.openBlock(), Vue.createBlock(Vue.resolveDynamicComponent(finalIcon.value), {
            key: 1,
            size: _ctx.size
          }, null, 8, ["size"])) : isImg() ? (Vue.openBlock(), Vue.createElementBlock("img", {
            key: 2,
            src: finalIcon.value,
            alt: _ctx.imgAlt
          }, null, 8, _hoisted_1)) : isSvgIcon() ? (Vue.openBlock(), Vue.createBlock(SvgIcon_vue_vue_type_script_setup_true_name_SvgIcon_lang.default, {
            key: 3,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : isFontIcon() ? (Vue.openBlock(), Vue.createBlock(FontIcon_vue_vue_type_script_setup_true_lang.default, {
            key: 4,
            icon: finalIcon.value,
            iconType: getFontIconType()
          }, null, 8, ["icon", "iconType"])) : isIconifyOffline() ? (Vue.openBlock(), Vue.createBlock(IconifyOffline_vue_vue_type_script_setup_true_name_IconifyOffline_lang.default, {
            key: 5,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : isIconifyOnline() ? (Vue.openBlock(), Vue.createBlock(IconifyOnline_vue_vue_type_script_setup_true_lang.default, {
            key: 6,
            icon: finalIcon.value
          }, null, 8, ["icon"])) : Vue.createCommentVNode("v-if", true)
        ],
        6
        /* CLASS, STYLE */
      );
    };
  }
});

exports.default = _sfc_main;
