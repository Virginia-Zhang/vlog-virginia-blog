'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var useLocale = require('../../../../composables/useLocale.js');
var useStorage = require('../../../../composables/useStorage.js');
require('../../../../composables/useZIndex.js');
var index = require('../../ConfigProvider/index.js');
var index_vue_vue_type_script_setup_true_name_Icon_lang = require('../../../common/Icon/src/index.vue2.js');
require('@iconify/vue');
var index_vue_vue_type_script_setup_true_name_Popover_lang = require('../../../common/Popover/src/index.vue2.js');
var themeEnhance = require('../../ThemeEnhance/src/themeEnhance.js');
var namespace = require('../../ThemeEnhance/src/namespace.js');
var magic = require('../../../../static/icons/magic.js');
var namespace$1 = require('./namespace.js');

const _hoisted_1 = ["title", "aria-label"];
const _hoisted_2 = ["onClick", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const themeColor = useStorage.useStorage(
      namespace.themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColor || themeEnhance.ThemeColor.vpDefault
    );
    const update = (val) => {
      const el = document.documentElement;
      themeColor.value = val;
      if (el.getAttribute(themeEnhance.themeColorAttribute) === val) return;
      el.setAttribute(themeEnhance.themeColorAttribute, val);
    };
    Vue.watch(
      () => frontmatter.value.themeColor,
      (newVal) => {
        if (newVal) update(newVal);
      }
    );
    Vue.onMounted(() => {
      if (frontmatter.value.themeColor) update(frontmatter.value.themeColor);
      else update(themeColor.value);
    });
    const themeColorList = Vue.computed(() => {
      const { append = [] } = themeEnhanceConfig.value.themeColor || {};
      return [
        {
          label: t("tk.themeEnhance.themeColor.vpLabel"),
          tip: t("tk.themeEnhance.themeColor.vpTip"),
          options: [
            { label: t("tk.themeEnhance.themeColor.defaultLabel"), value: "vp-default" },
            { label: t("tk.themeEnhance.themeColor.greenLabel"), value: "vp-green" },
            { label: t("tk.themeEnhance.themeColor.yellowLabel"), value: "vp-yellow" },
            { label: t("tk.themeEnhance.themeColor.redLabel"), value: "vp-red" }
          ]
        },
        {
          label: t("tk.themeEnhance.themeColor.epLabel"),
          tip: t("tk.themeEnhance.themeColor.epTip"),
          options: [
            { label: t("tk.themeEnhance.themeColor.blueLabel"), value: "ep-blue" },
            { label: t("tk.themeEnhance.themeColor.greenLabel"), value: "ep-green" },
            { label: t("tk.themeEnhance.themeColor.yellowLabel"), value: "ep-yellow" },
            { label: t("tk.themeEnhance.themeColor.redLabel"), value: "ep-red" }
          ]
        },
        ...append
      ];
    });
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(Vue.unref(index_vue_vue_type_script_setup_true_name_Popover_lang.default), {
        class: Vue.normalizeClass(Vue.unref(namespace$1.ns).e("button")),
        "popper-class": Vue.unref(namespace$1.ns).e("dropdown"),
        placement: "left-start",
        width: 120,
        "x-offset": 15,
        "transition-name": Vue.unref(namespace$1.ns).joinNamespace("fade-scale"),
        title: Vue.unref(t)("tk.themeEnhance.themeColor.title"),
        role: "button",
        "aria-label": Vue.unref(t)("tk.themeEnhance.themeColor.title")
      }, {
        reference: Vue.withCtx(() => [
          Vue.createVNode(Vue.unref(index_vue_vue_type_script_setup_true_name_Icon_lang.default), {
            icon: Vue.unref(magic.default),
            "aria-hidden": "true"
          }, null, 8, ["icon"])
        ]),
        default: Vue.withCtx(() => [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(themeColorList.value, (item) => {
              return Vue.openBlock(), Vue.createElementBlock("ul", {
                key: item.label
              }, [
                Vue.createElementVNode("li", {
                  class: Vue.normalizeClass(`${Vue.unref(namespace$1.ns).e("dropdown__title")} sle`),
                  title: item.tip,
                  "aria-label": item.label
                }, Vue.toDisplayString(item.label), 11, _hoisted_1),
                Vue.createElementVNode("li", null, [
                  Vue.createElementVNode("ul", null, [
                    (Vue.openBlock(true), Vue.createElementBlock(
                      Vue.Fragment,
                      null,
                      Vue.renderList(item.options, (option) => {
                        return Vue.openBlock(), Vue.createElementBlock("li", {
                          key: item.label + option.value,
                          class: Vue.normalizeClass(["dropdown-item", "sle", { active: option.value === Vue.unref(themeColor) }]),
                          onClick: ($event) => update(option.value),
                          role: "button",
                          "aria-label": option.label
                        }, Vue.toDisplayString(option.label), 11, _hoisted_2);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "popper-class", "transition-name", "title", "aria-label"]);
    };
  }
});

exports.default = _sfc_main;
