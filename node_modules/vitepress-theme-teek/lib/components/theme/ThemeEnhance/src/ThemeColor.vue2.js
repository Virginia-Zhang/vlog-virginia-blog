'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var vitepress = require('vitepress');
var index$1 = require('../../../../helper/dist/index.js');
var useLocale = require('../../../../composables/useLocale.js');
var useMediaQuery = require('../../../../composables/useMediaQuery.js');
var useStorage = require('../../../../composables/useStorage.js');
var useThemeColor = require('../../../../composables/useThemeColor.js');
require('../../../../composables/useZIndex.js');
var water = require('../../../../static/icons/theme-enhance/water.js');
var index = require('../../ConfigProvider/index.js');
var Segmented_vue_vue_type_script_setup_true_name_Segmented_lang = require('../../../common/Segmented/src/Segmented.vue2.js');
var themeEnhance = require('./themeEnhance.js');
var namespace = require('./namespace.js');
var BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang = require('./components/BaseTemplate.vue2.js');
var Switch_vue_vue_type_script_setup_true_name_Switch_lang = require('./components/Switch.vue2.js');

const _hoisted_1 = { class: "flx-justify-between flx-1" };
const _hoisted_2 = { class: "flx-align-center" };
const _hoisted_3 = { class: "label" };
const _hoisted_4 = ["title", "aria-label"];
var _sfc_main = /* @__PURE__ */ Vue.defineComponent({
  ...{ name: "ThemeColor" },
  __name: "ThemeColor",
  setup(__props) {
    const { getTeekConfigRef } = index.useTeekConfig();
    const themeEnhanceConfig = getTeekConfigRef("themeEnhance", {});
    const { t } = useLocale.useLocale();
    const { frontmatter } = vitepress.useData();
    const isMobile = useMediaQuery.useMediaQuery(themeEnhance.mobileMaxWidthMedia);
    const themeColor = useStorage.useStorage(
      namespace.themeColorStorageKey,
      themeEnhanceConfig.value.themeColor?.defaultColor || themeEnhance.ThemeColor.vpDefault
    );
    const isSpread = useStorage.useStorage(namespace.themeBgColorStorageKey, themeEnhanceConfig.value.themeColor?.defaultSpread || false);
    const oldThemeColor = Vue.ref(themeColor.value);
    const primaryColor = Vue.ref("");
    const { start, stop, clear } = useThemeColor.useThemeColor(primaryColor, () => {
      if (themeEnhance.themeColorList.includes(themeColor.value)) {
        return [useThemeColor.varNameList.vpIndigo1, useThemeColor.varNameList.vpIndigo2, useThemeColor.varNameList.vpIndigo3, useThemeColor.varNameList.vpIndigoSoft];
      }
    });
    const update = (val) => {
      if (!index$1.isClient) return;
      const el = document.documentElement;
      if (el.getAttribute(themeEnhance.themeColorAttribute) === val) return;
      el.setAttribute(themeEnhance.themeColorAttribute, val);
      clear();
      primaryColor.value = getComputedStyle(el).getPropertyValue(useThemeColor.varNameList.vpIndigo1);
      themeEnhanceConfig.value.themeColor?.switchColorDone?.(val);
    };
    Vue.watch(themeColor, update, { immediate: true });
    Vue.watch(
      () => frontmatter.value.themeColor,
      (newVal) => {
        if (newVal) {
          oldThemeColor.value = themeColor.value;
          themeColor.value = newVal;
        } else {
          themeColor.value = oldThemeColor.value;
        }
      },
      { immediate: true }
    );
    Vue.watch(
      isSpread,
      (newVal) => {
        if (newVal) start();
        else stop();
      },
      { immediate: true, flush: "post" }
    );
    const themeColorSelectList = Vue.computed(() => {
      const { append = [] } = themeEnhanceConfig.value.themeColor || {};
      return [
        {
          label: t("tk.themeEnhance.themeColor.vpLabel"),
          tip: t("tk.themeEnhance.themeColor.vpTip"),
          options: [
            {
              value: themeEnhance.ThemeColor.vpDefault,
              label: t("tk.themeEnhance.themeColor.defaultLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.defaultLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.defaultLabel")}`
            },
            {
              value: themeEnhance.ThemeColor.vpGreen,
              label: t("tk.themeEnhance.themeColor.greenLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.greenLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.greenLabel")}`
            },
            {
              value: themeEnhance.ThemeColor.vpYellow,
              label: t("tk.themeEnhance.themeColor.yellowLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.yellowLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.yellowLabel")}`
            },
            {
              value: themeEnhance.ThemeColor.vpRed,
              label: t("tk.themeEnhance.themeColor.redLabel"),
              title: `VitePress ${t("tk.themeEnhance.themeColor.redLabel")}`,
              ariaLabel: `VitePress ${t("tk.themeEnhance.themeColor.redLabel")}`
            }
          ]
        },
        {
          label: t("tk.themeEnhance.themeColor.epLabel"),
          tip: t("tk.themeEnhance.themeColor.epTip"),
          options: [
            {
              value: themeEnhance.ThemeColor.epBlue,
              label: `${t("tk.themeEnhance.themeColor.blueLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.blueLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.blueLabel")}`
            },
            {
              value: themeEnhance.ThemeColor.epGreen,
              label: `${t("tk.themeEnhance.themeColor.greenLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.greenLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.greenLabel")}`
            },
            {
              value: themeEnhance.ThemeColor.epYellow,
              label: `${t("tk.themeEnhance.themeColor.yellowLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.yellowLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.yellowLabel")}`
            },
            {
              value: themeEnhance.ThemeColor.epRed,
              label: `${t("tk.themeEnhance.themeColor.redLabel")}`,
              title: `ElementPlus ${t("tk.themeEnhance.themeColor.redLabel")}`,
              ariaLabel: `ElementPlus ${t("tk.themeEnhance.themeColor.redLabel")}`
            }
          ]
        },
        ...append
      ];
    });
    const tips = [
      { title: t("tk.themeEnhance.themeColor.vpHelpTipTitle"), content: t("tk.themeEnhance.themeColor.vpHelpTipContent") },
      { title: t("tk.themeEnhance.themeColor.epHelpTipTitle"), content: t("tk.themeEnhance.themeColor.epHelpTipContent") }
    ];
    return (_ctx, _cache) => {
      return Vue.openBlock(), Vue.createBlock(BaseTemplate_vue_vue_type_script_setup_true_name_BaseTemplate_lang.default, {
        class: Vue.normalizeClass(Vue.unref(namespace.ns).e("theme-color")),
        icon: Vue.unref(water.default),
        title: Vue.unref(t)("tk.themeEnhance.themeColor.title"),
        helper: !Vue.unref(themeEnhanceConfig).themeColor?.disableHelp,
        "helper-desc": Vue.unref(t)("tk.themeEnhance.themeColor.helpDesc"),
        tips,
        disabled: Vue.unref(isMobile)
      }, {
        title: Vue.withCtx(() => [
          Vue.createElementVNode("div", _hoisted_1, [
            Vue.createTextVNode(
              Vue.toDisplayString(Vue.unref(t)("tk.themeEnhance.themeColor.title")) + " ",
              1
              /* TEXT */
            ),
            Vue.createElementVNode("div", _hoisted_2, [
              Vue.createElementVNode(
                "span",
                _hoisted_3,
                Vue.toDisplayString(Vue.unref(t)("tk.themeEnhance.themeColor.speedLabel")),
                1
                /* TEXT */
              ),
              Vue.createVNode(Switch_vue_vue_type_script_setup_true_name_Switch_lang.default, {
                modelValue: Vue.unref(isSpread),
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => Vue.isRef(isSpread) ? isSpread.value = $event : null)
              }, null, 8, ["modelValue"])
            ])
          ])
        ]),
        default: Vue.withCtx(() => [
          (Vue.openBlock(true), Vue.createElementBlock(
            Vue.Fragment,
            null,
            Vue.renderList(themeColorSelectList.value, (item) => {
              return Vue.openBlock(), Vue.createElementBlock(
                Vue.Fragment,
                {
                  key: item.label
                },
                [
                  Vue.createElementVNode("h3", {
                    title: item.tip,
                    "aria-label": item.label
                  }, Vue.toDisplayString(item.label), 9, _hoisted_4),
                  Vue.createVNode(Vue.unref(Segmented_vue_vue_type_script_setup_true_name_Segmented_lang.default), {
                    modelValue: Vue.unref(themeColor),
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => Vue.isRef(themeColor) ? themeColor.value = $event : null),
                    options: item.options,
                    disabled: Vue.unref(isMobile)
                  }, null, 8, ["modelValue", "options", "disabled"])
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        _: 1
        /* STABLE */
      }, 8, ["class", "icon", "title", "helper", "helper-desc", "disabled"]);
    };
  }
});

exports.default = _sfc_main;
