'use strict';

var vitepress = require('vitepress');
var index = require('../helper/dist/index.js');
var Vue = require('vue');

const vpIndigo1 = "--vp-c-indigo-1";
const vpIndigo2 = "--vp-c-indigo-2";
const vpIndigo3 = "--vp-c-indigo-3";
const vpIndigoSoft = "--vp-c-indigo-soft";
const vpBg = "--vp-c-bg";
const vpBgAlt = "--vp-c-bg-alt";
const vpBgSoft = "--vp-c-bg-soft";
const vpBgElv = "--vp-c-bg-elv";
const vpText1 = "--vp-c-text-1";
const vpText2 = "--vp-c-text-2";
const vpText3 = "--vp-c-text-3";
const tkBgColorElm = "--tk-bg-color-elm";
const tkBgColorMute = "--tk-bg-color-mute";
const varNameList = {
  vpIndigo1,
  vpIndigo2,
  vpIndigo3,
  vpIndigoSoft,
  vpBg,
  vpBgAlt,
  vpBgSoft,
  vpBgElv,
  vpText1,
  vpText2,
  vpText3,
  tkBgColorElm,
  tkBgColorMute
};
const useThemeColor = (color, ignoreList) => {
  const { isDark } = vitepress.useData();
  const ignoreListConst = index.isFunction(ignoreList) ? ignoreList() : ignoreList || [];
  const setStyleVar = (key, value) => {
    if (!index.isClient) return;
    document.documentElement.style.setProperty(key, value);
  };
  const removeStyleVar = (key) => {
    if (!index.isClient) return;
    document.documentElement.style.removeProperty(key);
  };
  const colorComputed = Vue.computed(() => Vue.toValue(color));
  const clear = () => {
    Object.values(varNameList).forEach((key) => {
      removeStyleVar(key);
    });
  };
  const switchLight = () => {
    if (!index.isClient) return;
    const primary = colorComputed.value;
    if (!primary) return;
    const lightVarMap = {
      [vpIndigo1]: primary,
      [vpIndigo2]: index.getLightColor(primary, 0.1),
      [vpIndigo3]: index.getLightColor(primary, 0.2),
      [vpIndigoSoft]: index.getLightColor(primary, 0.85),
      [vpBg]: index.getLightColor(primary, 0.96),
      [vpBgAlt]: index.getLightColor(primary, 0.93),
      [vpBgElv]: index.getLightColor(primary, 0.945),
      [vpBgSoft]: index.getLightColor(primary, 0.93),
      [vpText1]: index.getDarkColor(primary, 0.6),
      [vpText2]: index.getDarkColor(primary, 0.7),
      [vpText3]: index.getLightColor(primary, 0.6),
      [tkBgColorElm]: index.getLightColor(primary, 0.945),
      [tkBgColorMute]: index.getLightColor(primary, 0.91)
    };
    Object.keys(lightVarMap).forEach((key) => {
      if (ignoreListConst?.includes(key)) return;
      setStyleVar(key, lightVarMap[key]);
    });
  };
  const switchDark = () => {
    if (!index.isClient) return;
    const primary = colorComputed.value;
    if (!primary) return;
    const darkVarMap = {
      [vpIndigo1]: primary,
      [vpIndigo2]: index.getDarkColor(primary, 0.1),
      [vpIndigo3]: index.getDarkColor(primary, 0.2),
      [vpIndigoSoft]: index.getDarkColor(primary, 0.85),
      [vpBg]: index.getDarkColor(primary, 0.92),
      [vpBgAlt]: index.getDarkColor(primary, 0.94),
      [vpBgElv]: index.getDarkColor(primary, 0.92),
      [vpBgSoft]: index.getDarkColor(primary, 0.94),
      [vpText1]: index.getLightColor(primary, 0.9),
      [tkBgColorElm]: index.getDarkColor(primary, 0.92),
      [tkBgColorMute]: index.getDarkColor(primary, 0.91)
    };
    Object.keys(darkVarMap).forEach((key) => {
      if (ignoreListConst?.includes(key)) return;
      setStyleVar(key, darkVarMap[key]);
    });
  };
  const isStop = Vue.shallowRef(false);
  let stopWatch = null;
  const update = () => {
    if (isStop.value) return;
    clear();
    if (isDark.value) switchDark();
    else switchLight();
  };
  const start = () => {
    if (!isStop.value || !!stopWatch) return;
    isStop.value = false;
    update();
    stopWatch = Vue.watch(isDark, update, { flush: "post" });
  };
  const stop = () => {
    stopWatch?.();
    stopWatch = null;
    isStop.value = true;
    clear();
  };
  start();
  Vue.watch(colorComputed, update);
  return { start, stop, update, clear };
};

exports.useThemeColor = useThemeColor;
exports.varNameList = varNameList;
